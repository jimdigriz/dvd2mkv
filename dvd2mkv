#!/bin/sh

set -eu

# This script converts in a lossless manner a DVD to an MKV.  To use it just run
#
#    sh dvd2mkv
#
# It will use the first DVD drive it finds, but you can override this by setting
# the environment variable `DVD` to point to the source device
#
# Thanks go to http://aperiodic.net/phil/archives/Geekery/lossless-dvd-to-mkv.html
#
# # Preflight
#
# you need will need at least a Debian Wheezy system with the following apt-get repositories:
# * Debian Backports
# * Debian Multimedia - http://www.deb-multimedia.org/
# * MKVToolNix - https://www.bunkus.org/videotools/mkvtoolnix/downloads.html#debian
#
# sudo apt-get install -yy --no-install-recommends -t wheezy-backports lsdvd libdvdcss2 xmlstarlet transcode pv mkvtoolnix fuseiso9660 subtitleripper
#
# # Issues
#
# * put more tracks into the same mkv
# * add chapters
# * SIZE is not accurate
# * OCR VobSub and add a second set of subtitles that are pure text

DVD=${DVD:-$(ls -1 /dev/dvd[0-9]* | head -n1)}
if [ ! -e $DVD ]; then
	echo "unable to find DVD drive (/dev/dvd[0-9]*)" >&2
	exit 1
fi

if [ ! -r $DVD ]; then
	echo "no read permission on '$DVD', are you a member of the 'cdrom' group?" >&2
	exit 1
fi

printf "analysing DVD: "
RC=0
lsdvd -q -x -Ox $DVD 2>&1 > output.lsdvd || RC=$?
if [ $RC -ne 0 ]; then
	echo "failed" >&2
	cat output.lsdvd >&2
	exit 1
fi
sed -i 's/&/\&amp;/g' output.lsdvd

TITLE=$(xmlstarlet sel -t -v /lsdvd/title output.lsdvd)
TRACK=$(xmlstarlet sel -t -v /lsdvd/longest_track output.lsdvd)
SIZE=$(tcprobe -i $DVD -d 2 -T $TRACK 2>&1 | awk '/block from/ { if ($(NF)>A) A=$(NF) } END { print A*2048 }')

echo "title '$TITLE', longest track $TRACK";

printf "extracting VOB: "
if [ ! -f $TITLE.$TRACK.vob ]; then
	echo $((SIZE/1024/1024))MiB

	tccat -i $DVD -t dvd -T $TRACK,-1 2>/dev/null | pv -W -e -r -b -p -s ${SIZE} > .$TITLE.$TRACK.vob
	mv .$TITLE.$TRACK.vob $TITLE.$TRACK.vob
else
	echo skipping
fi

SUBTITLES=
NSUBS=$(xmlstarlet sel -t -v "count(/lsdvd/track[ix=$TRACK]/subp/ix)" output.lsdvd)
if [ $NSUBS -gt 0 ]; then
	printf "extracting $NSUBS subtitles, fetching IFO: "

	if [ ! -f $TITLE.ifo ]; then
		VTS=$(printf "%02d" $(xmlstarlet sel -t -v /lsdvd/track[ix=$TRACK]/vts output.lsdvd))

		mkdir -p .dvd
		fuseiso9660 $DVD .dvd
		cp .dvd/VIDEO_TS/VTS_${VTS}_0.IFO\;1 .$TITLE.ifo
		chmod 664 .$TITLE.ifo
		mv .$TITLE.ifo $TITLE.ifo
		fusermount -u .dvd
		rmdir .dvd

		echo done
	else
		echo skipped
	fi

	for INDEX in $(xmlstarlet sel -t -v /lsdvd/track[ix=$TRACK]/subp/ix output.lsdvd); do
		LANGCODE=$(xmlstarlet sel -t -v /lsdvd/track[ix=$TRACK]/subp[ix=$INDEX]/langcode output.lsdvd)
		STREAMID=$(xmlstarlet sel -t -v /lsdvd/track[ix=$TRACK]/subp[ix=$INDEX]/streamid output.lsdvd)

		printf " - $STREAMID [$LANGCODE]: "

		SUBTITLES="$SUBTITLES --language 0:$LANGCODE --default-track 0:0 $TITLE.$TRACK.subs.$INDEX.$LANGCODE.idx"

		if [ ! -f $TITLE.$TRACK.subs.$INDEX.$LANGCODE.idx -o ! -f $TITLE.$TRACK.subs.$INDEX.$LANGCODE.sub ]; then
			tcextract -i $TITLE.$TRACK.vob -t vob -x ps1 -a $STREAMID \
				| subtitle2vobsub -i $TITLE.ifo -o $TITLE.$TRACK.subs.$INDEX.$LANGCODE
			echo done
		else
			echo skipped
		fi
	done
fi

echo "creating MKV:"
if [ ! -f $TITLE.$TRACK.mkv ]; then
	: > .$TITLE.$TRACK.mkv
	mkvmerge --quiet --title $TITLE --output .$TITLE.$TRACK.mkv $SUBTITLES $TITLE.$TRACK.vob &
	tail -q --pid=$! -F .$TITLE.$TRACK.mkv | pv -W -e -r -b -p -s ${SIZE} > /dev/null
	mv .$TITLE.$TRACK.mkv $TITLE.$TRACK.mkv
fi

exit 0
